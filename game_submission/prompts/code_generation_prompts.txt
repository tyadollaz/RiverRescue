# Prompts for Code Generation

## Project Setup and Architecture

1. **Initial Project Structure**
   "Help me set up a React + Vite + TypeScript + Phaser project for a side-scrolling arcade game. Include:
   - Project scaffolding with proper folder structure
   - TypeScript configuration
   - Phaser 3 integration with React
   - Asset loading system
   What's the best way to organize game code vs React components?"

2. **Game Configuration**
   "Create a settings.ts file that centralizes all game constants:
   - Canvas dimensions (960x540)
   - Game timer (60 seconds)
   - Score values for different collectibles
   - Clean thresholds for background transitions
   - Physics settings
   Make it easily customizable."

3. **Asset Management System**
   "Design an assets.ts module that:
   - Maps all game sprites to file paths
   - Makes assets easily replaceable
   - Supports multiple background stages
   - Works with Phaser's preloader
   How should I structure this for maximum flexibility?"

## Core Game Mechanics

4. **Phaser Scene Architecture**
   "Help me create 4 Phaser scenes for my game:
   - BootScene: Asset loading with progress bar
   - MenuScene: Main menu with buttons
   - PlayScene: Main gameplay
   - EndScene: Results screen
   
   How should they communicate and transition between each other?"

5. **Player Physics and Controls**
   "Implement Jetpack Joyride-style controls in Phaser:
   - Hold space/mouse to apply upward force
   - Release to fall with gravity
   - Smooth acceleration/deceleration
   - Screen boundary collision
   Use Arcade Physics and make it feel responsive."

6. **Spawning System**
   "Create a wave-based spawning system that generates:
   - Random trash items at intervals
   - Obstacle patterns (single, pairs, rows)
   - Power-ups less frequently
   - Varied Y positions within safe zone
   - Increasing difficulty over time
   Include spawn rates and randomization logic."

7. **Collision Detection**
   "Implement collision/overlap detection for:
   - Player + Trash (collect, add score, destroy)
   - Player + Obstacles (damage, penalty, screen shake)
   - Player + Power-ups (activate effect, destroy)
   - Magnet + Trash (attraction physics)
   Use Phaser's Physics Groups efficiently."

## Game Features

8. **Power-up System**
   "Code three power-up effects:
   1. Turbo Cleaner (Magnet): Attracts trash within radius for 5 seconds
   2. Eco Shield: Invincibility for 4 seconds with visual effect
   3. Eco Boost: Adds 10 seconds to game timer
   
   Include timers, visual feedback, and proper state management."

9. **Progressive Background System**
   "Implement a dynamic background that changes based on score:
   - 7 stages from murky (0) to clean (6)
   - Smooth transitions using TileSprite
   - Horizontal scrolling parallax effect
   - Thresholds: 0, 100, 200, 350, 500, 700, 900 points
   How do I efficiently swap textures in Phaser?"

10. **Score and Timer System**
    "Create HUD system displaying:
    - Current score (updates on collect)
    - Trash collected counter
    - Countdown timer (60s â†’ 0)
    - Active power-up indicators
    - Cleanliness percentage
    Update every frame efficiently, end game when timer reaches 0."

## UI and Menus

11. **Menu Scene with Buttons**
    "Build an interactive menu with:
    - Play button (pulsing animation)
    - About button (shows environmental facts popup)
    - Stats button (shows local storage data)
    - Styled text with custom colors
    - Hover effects on buttons
    - Background story text
    Use Phaser's text and interactive objects."

12. **End Screen with Statistics**
    "Design results screen showing:
    - Final score
    - Total trash collected
    - Cleanliness percentage achieved
    - Random environmental fact
    - Replay button
    - Return to menu button
    - Compare with high score
    Make it feel rewarding and educational."

## Data Persistence

13. **Local Storage System**
    "Implement localStorage to save:
    - Best score (rr_best)
    - Total trash collected across sessions (rr_cleaned_total)
    - Load on game start
    - Update on game end
    - Display in stats menu
    Handle edge cases (first play, corrupted data)."

## React Integration

14. **React Component for Game Container**
    "Create an App.tsx component that:
    - Uses useRef for game container div
    - Initializes Phaser game in useEffect
    - Properly destroys game on unmount
    - Centers game with CSS grid
    - Adds border styling
    - Prevents memory leaks"

15. **Game Initialization Module**
    "Write GameInit.ts with:
    - initGame() function that creates Phaser.Game
    - destroyGame() for cleanup
    - Proper Phaser config (canvas size, physics, scenes)
    - Parent element attachment
    - TypeScript types for everything"

## Polish and Effects

16. **Visual Feedback Effects**
    "Add juice to the game:
    - Camera shake on collision (120ms, 0.004 intensity)
    - Screen flash on shield pickup (blue tint)
    - Particle effects on trash collection
    - Smooth lerping for boat movement
    - Power-up glow animations"

17. **Responsive Asset Scaling**
    "Ensure all sprites are:
    - Scaled appropriately for canvas size
    - Using pixelArt: true for crisp pixels
    - Centered origins for rotation
    - Proper hitbox sizes
    - Consistent visual scale"

## Optimization

18. **Performance Optimization**
    "Optimize the game for smooth 60fps:
    - Object pooling for frequently spawned items
    - Destroy off-screen objects
    - Efficient collision checks
    - Limit particle effects
    - Throttle HUD updates if needed
    Profile and identify bottlenecks."

19. **Asset Loading Optimization**
    "Implement efficient preloading:
    - Show loading progress bar
    - Compress images without quality loss
    - Load critical assets first
    - Handle loading errors gracefully
    - Cache assets in browser"

## Debug and Testing

20. **Debug Mode**
    "Add development features:
    - Physics debug rendering (hitboxes)
    - Console logging for events
    - FPS counter
    - Skip to different game states
    - Adjustable game speed
    Toggle with config flag."

## Code Quality

21. **TypeScript Type Safety**
    "Ensure proper typing for:
    - Phaser scene types
    - Game object interfaces
    - Event handlers
    - Asset keys (const assertions)
    - Physics body types
    No 'any' types except where necessary."

22. **Code Organization**
    "Structure the codebase:
    - Separate concerns (scenes, utils, types)
    - Reusable helper functions
    - Constants in settings file
    - Clear file naming
    - Consistent formatting
    Follow React and Phaser best practices."

## Build and Deployment

23. **Production Build**
    "Configure Vite for production:
    - Optimize bundle size
    - Minify code
    - Generate sourcemaps
    - Set base path for deployment
    - Create standalone HTML version
    What build commands should I use?"

24. **Export Standalone Game**
    "Create a self-contained HTML file that:
    - Works without build process
    - Includes all assets inline or referenced
    - Loads quickly in browser
    - Compatible with game_submission/game_app/ structure
    - No npm dependencies at runtime"